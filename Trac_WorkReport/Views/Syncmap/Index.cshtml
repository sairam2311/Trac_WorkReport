
   
    <style>
       
        
      
        .map-container {
            position: relative;
            margin-bottom: 5px;
        }
        .map-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 5px;
            text-align: center;
        }
      /*   .maps-row {
            margin-bottom: 10px;
        } */
        .map {
            width: 100%;
            height: 350px;
        }
        .dropdowns {
            padding: 20px;
           /*  background-color: #f8f9fa;
                border-bottom: 1px solid #dee2e6;*/
        }
    </style>

    <!-- Header with Two Logos and Company Name -->


    <!-- Dropdowns for Districts, Mandals, Villages, and Tanks -->
    <div class="dropdowns container-fluid">
        <div class="row">
            <div class="col-md-3">
                <select id="districtDropdown" class="form-select">
                    <option value="">Select District</option>
                    <!-- Options will be populated dynamically -->
                </select>
            </div>
            <div class="col-md-3">
                <select id="mandalDropdown" class="form-select">
                    <option value="">Select Mandal</option>
                    <!-- Options will be populated dynamically -->
                </select>
            </div>
            <div class="col-md-3">
                <select id="villageDropdown" class="form-select">
                    <option value="">Select Village</option>
                    <!-- Options will be populated dynamically -->
                </select>
            </div>
            <div class="col-md-3">
                <select id="tankDropdown" class="form-select">
                    <option value="">Select Tank</option>
                    <!-- Options will be populated dynamically -->
                </select>
            </div>
        </div>
    </div>

    <!-- Maps -->
    <div class="container-fluid">
    <div class="row">
        <div class="col-md-6">
        <div class="card text-white bg-light">
            <div class="card-header">Header</div>
            <div class="card-body map" id="map1">
            </div>
        </div>
        </div>
        <div class="col-md-6">
        <div class="card text-white bg-light mb-1 ">
            <div class="card-header">Header</div>
            <div class="card-body map" id="map2">
            </div>
        </div>
       </div>
        </div>

    <div class="row">
        <div class="col-md-6 map-container">
        <div class="card text-white bg-light mb-1 ">
            <div class="card-header">Header</div>
            <div class="card-body map" id="map3">
            </div>
        </div>
        </div>
        <div class="col-md-6 map-container">
        <div class="card text-white bg-light mb-1" >
            <div class="card-header">Header</div>
            <div class="card-body map" id="map4">
            </div>
        </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/ol@v7.2.2/dist/ol.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ol-layerswitcher@4.1.1/dist/ol-layerswitcher.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/proj4@2.7.5/dist/proj4.js"></script>
    <script>
        // Define the view for the maps with Telangana center coordinates
        const view = new ol.View({
            center: ol.proj.fromLonLat([78.2564, 17.3140]), // Center on Telangana
            zoom: 8 // Adjust zoom level as needed for better visibility
        });

        // Define World Imagery layers
        const createWorldImageryLayer = () => new ol.layer.Tile({
            source: new ol.source.XYZ({
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'
            })
        });

        // Define other ArcGIS layers
        const arcgisLayer = new ol.layer.Tile({
            source: new ol.source.TileArcGISRest({
                url: 'http://tgracgis.telangana.gov.in/arcgis/rest/services/TankInformationSystem/Telangana_Information_System_Query/MapServer'
            })
        });

        const arcgisTop = new ol.layer.Tile({
            source: new ol.source.TileArcGISRest({
                url: 'http://tgracgis.telangana.gov.in/arcgis/rest/services/TankInformationSystem/SOI_Toposheet/MapServer'
            })
        });

        const arcgisSentinel = new ol.layer.Tile({
            source: new ol.source.TileArcGISRest({
                url: 'http://tgracgis.telangana.gov.in/arcgis/rest/services/TankInformationSystem/TS_Sentinal_2023_Image/MapServer'
            })
        });

        const arcgisTIS = new ol.layer.Tile({
            source: new ol.source.TileArcGISRest({
                url: 'http://tgracgis.telangana.gov.in/arcgis/rest/services/TankInformationSystem/Telangana_Information_System/MapServer'
            })
        });

        // Function to create maps with a separate base layer
        const createMap = (target, baseLayers) => new ol.Map({
            target: target,
            layers: baseLayers,
            view: view
        });

        // Create maps with the World Imagery layer and specific ArcGIS layers
        const map1 = createMap('map1', [createWorldImageryLayer(), arcgisLayer]);
        const map2 = createMap('map2', [createWorldImageryLayer(), arcgisTop, arcgisLayer]);
        const map3 = createMap('map3', [createWorldImageryLayer(), arcgisSentinel, arcgisLayer]);
        const map4 = createMap('map4', [createWorldImageryLayer(), arcgisTIS]);

        // Function to populate dropdowns with data from the REST service
        async function populateDropdowns() {
            try {
                // Fetch and populate districts
                const responseDistricts = await fetch('http://tgracgis.telangana.gov.in/arcgis/rest/services/TankInformationSystem/Telangana_Information_System_Query/MapServer/0/query?where=1%3D1&outFields=DISTRICT_NAME&f=json');
                const dataDistricts = await responseDistricts.json();
                const districts = dataDistricts.features;

                const districtDropdown = document.getElementById('districtDropdown');
                districts.forEach(district => {
                    const option = document.createElement('option');
                    option.value = district.attributes.DISTRICT_NAME;
                    option.textContent = district.attributes.DISTRICT_NAME;
                    districtDropdown.appendChild(option);
                });

                // Handle changes in dropdowns
                districtDropdown.addEventListener('change', async function () {
                    const selectedDistrict = this.value;
                    await populateMandals(selectedDistrict);
                });

                // Initial population of mandals
                async function populateMandals(districtName) {
                    try {
                        const responseMandals = await fetch(`http://tgracgis.telangana.gov.in/arcgis/rest/services/TankInformationSystem/Telangana_Information_System_Query/MapServer/1/query?where=DISTRICT_NAME='${districtName}'&outFields=MANDAL_NAME&f=json`);
                        const dataMandals = await responseMandals.json();
                        const mandals = dataMandals.features;

                        const mandalDropdown = document.getElementById('mandalDropdown');
                        mandalDropdown.innerHTML = '<option value="">Select Mandal</option>';
                        mandals.forEach(mandal => {
                            const option = document.createElement('option');
                            option.value = mandal.attributes.MANDAL_NAME;
                            option.textContent = mandal.attributes.MANDAL_NAME;
                            mandalDropdown.appendChild(option);
                        });

                        // Handle changes in mandal dropdown
                        mandalDropdown.addEventListener('change', async function () {
                            const selectedMandal = this.value;
                            await populateVillages(selectedMandal);
                        });

                        // Initial population of villages
                        async function populateVillages(mandalName) {
                            try {
                                const responseVillages = await fetch(`http://tgracgis.telangana.gov.in/arcgis/rest/services/TankInformationSystem/Telangana_Information_System_Query/MapServer/2/query?where=MANDAL_NAME='${mandalName}'&outFields=VILLAGE_NAME&f=json`);
                                const dataVillages = await responseVillages.json();
                                const villages = dataVillages.features;

                                const villageDropdown = document.getElementById('villageDropdown');
                                villageDropdown.innerHTML = '<option value="">Select Village</option>';
                                villages.forEach(village => {
                                    const option = document.createElement('option');
                                    option.value = village.attributes.VILLAGE_NAME;
                                    option.textContent = village.attributes.VILLAGE_NAME;
                                    villageDropdown.appendChild(option);
                                });

                                // Handle changes in village dropdown
                                villageDropdown.addEventListener('change', async function () {
                                    const selectedVillage = this.value;
                                    await populateTanks(selectedVillage);
                                });

                                // Initial population of tanks
                                async function populateTanks(villageName) {
                                    try {
                                        const responseTanks = await fetch(`http://tgracgis.telangana.gov.in/arcgis/rest/services/TankInformationSystem/Telangana_Information_System_Query/MapServer/3/query?where=VILLAGE_NAME='${villageName}'&outFields=TANK_NAME&f=json`);
                                        const dataTanks = await responseTanks.json();
                                        const tanks = dataTanks.features;

                                        const tankDropdown = document.getElementById('tankDropdown');
                                        tankDropdown.innerHTML = '<option value="">Select Tank</option>';
                                        tanks.forEach(tank => {
                                            const option = document.createElement('option');
                                            option.value = tank.attributes.TANK_NAME;
                                            option.textContent = tank.attributes.TANK_NAME;
                                            tankDropdown.appendChild(option);
                                        });

                                        // Handle changes in tank dropdown
                                        tankDropdown.addEventListener('change', function () {
                                            const selectedTank = this.value;
                                            if (selectedTank) {
                                                zoomToFeature(selectedTank);
                                            }
                                        });
                                    } catch (error) {
                                        console.error('Error fetching tanks:', error);
                                    }
                                }
                            } catch (error) {
                                console.error('Error fetching villages:', error);
                            }
                        }
                    } catch (error) {
                        console.error('Error fetching mandals:', error);
                    }
                }
            } catch (error) {
                console.error('Error fetching districts:', error);
            }
        }

        // Function to zoom to a selected feature (tank)
        async function zoomToFeature(tankName) {
            try {
                const response = await fetch(`http://tgracgis.telangana.gov.in/arcgis/rest/services/TankInformationSystem/Telangana_Information_System_Query/MapServer/3/query?where=TANK_NAME='${tankName}'&outFields=*&f=json`);
                const data = await response.json();
                const features = data.features;

                if (features.length > 0) {
                    const feature = features[0];
                    const extent = feature.geometry.extent; // Adjust this line based on the actual field name for extent

                    if (extent) {
                        const [minX, minY, maxX, maxY] = extent;
                        const center = ol.extent.getCenter(extent);
                        const size = ol.extent.getSize(extent);
                        const zoom = Math.max(map1.getView().getZoom(), map2.getView().getZoom(), map3.getView().getZoom(), map4.getView().getZoom());

                        map1.getView().fit(extent, { duration: 1000 });
                        map2.getView().fit(extent, { duration: 1000 });
                        map3.getView().fit(extent, { duration: 1000 });
                        map4.getView().fit(extent, { duration: 1000 });
                    }
                } else {
                    console.warn('No features found for the selected tank.');
                }
            } catch (error) {
                console.error('Error fetching tank feature:', error);
            }
        }

        // Initialize dropdowns
        populateDropdowns();
    </script>

